// Generated by ReScript, PLEASE EDIT WITH CARE

import * as P from "./P.mjs";
import * as H1 from "./H1.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as BoardState from "./BoardState.mjs";

function Game$Board(Props) {
  var state = Props.state;
  var onMove = Props.onMove;
  return React.createElement("div", undefined, React.createElement(H1.make, {
                  children: "Game board"
                }), React.createElement("div", {
                  className: "relative border border-grey-200 w-[400px] h-[400px] grid grid-cols-4 grid-rows-4"
                }, Belt_Array.concatMany(Belt_Array.mapWithIndex(BoardState.rows(state), (function (rowIdx, row) {
                            return Belt_Array.mapWithIndex(row, (function (colIdx, tile) {
                                          var other = tile.value;
                                          var tmp;
                                          var exit = 0;
                                          if (other >= 17) {
                                            if (other !== 32) {
                                              exit = 1;
                                            } else {
                                              tmp = "#F2A032";
                                            }
                                          } else if (other >= 2) {
                                            switch (other) {
                                              case 2 :
                                                  tmp = "#7CB5E2";
                                                  break;
                                              case 4 :
                                                  tmp = "#4495D4";
                                                  break;
                                              case 8 :
                                                  tmp = "#2F6895";
                                                  break;
                                              case 3 :
                                              case 5 :
                                              case 6 :
                                              case 7 :
                                              case 9 :
                                              case 10 :
                                              case 11 :
                                              case 12 :
                                              case 13 :
                                              case 14 :
                                              case 15 :
                                                  exit = 1;
                                                  break;
                                              case 16 :
                                                  tmp = "#F5BD70";
                                                  break;
                                              
                                            }
                                          } else {
                                            exit = 1;
                                          }
                                          if (exit === 1) {
                                            tmp = other === 0 ? "transparent" : "red";
                                          }
                                          return React.createElement("div", {
                                                      key: tile.id,
                                                      className: "absolute flex justify-center items-center text-white text-3xl border border-green rounded-xl transition-all",
                                                      style: {
                                                        backgroundColor: tmp,
                                                        height: "80px",
                                                        left: String(Math.imul(colIdx, 90) + 10 | 0) + "px",
                                                        top: String(Math.imul(rowIdx, 90) + 10 | 0) + "px",
                                                        width: "80px"
                                                      }
                                                    }, tile.value);
                                        }));
                          })))), BoardState.isGameOver(state) ? React.createElement(P.make, {
                    children: "Game over"
                  }) : React.createElement("span", undefined), React.createElement("div", {
                  className: "grid grid-cols-3 grid-rows-3 w-[180px]"
                }, React.createElement("div", {
                      className: "col-start-2"
                    }, React.createElement(Button.make, {
                          onClick: (function (param) {
                              Curry._1(onMove, /* Up */0);
                            }),
                          children: "Up"
                        })), React.createElement("div", {
                      className: "col-start-2 row-start-3"
                    }, React.createElement(Button.make, {
                          onClick: (function (param) {
                              Curry._1(onMove, /* Down */1);
                            }),
                          children: "Down"
                        })), React.createElement("div", {
                      className: "row-start-2"
                    }, React.createElement(Button.make, {
                          onClick: (function (param) {
                              Curry._1(onMove, /* Left */2);
                            }),
                          children: "Left"
                        })), React.createElement("div", {
                      className: "row-start-2 col-start-3"
                    }, React.createElement(Button.make, {
                          onClick: (function (param) {
                              Curry._1(onMove, /* Right */3);
                            }),
                          children: "Right"
                        }))));
}

var Board = {
  make: Game$Board
};

function Game(Props) {
  var match = React.useState(function () {
        return BoardState.make(4);
      });
  var setBoardState = match[1];
  var move = function (direction) {
    Curry._1(setBoardState, (function (state) {
            return BoardState.move(state, direction);
          }));
  };
  return React.createElement("div", undefined, React.createElement(Game$Board, {
                  state: match[0],
                  onMove: move
                }));
}

var make = Game;

export {
  Board ,
  make ,
  Game ,
}
/* P Not a pure module */
